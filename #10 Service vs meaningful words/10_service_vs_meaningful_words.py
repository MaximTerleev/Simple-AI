# -*- coding: utf-8 -*-
"""#10 Service vs meaningful words

Automatically generated by Colaboratory.

Original file is located at
	https://colab.research.google.com/drive/1EMSb9qem78NJvIjtJX-uMizowla-o7_V?usp=sharing

# **Service words vs meaningful words**

"""

%%bash
spacy download es_core_news_sm

import es_core_news_sm

# Load text
file = open('/content/Don Quijote de la Mancha.txt', 'r')
text = file.read()
print(text)

# Load language model and process text
processor = es_core_news_sm.load()
ptext = processor(text.lower())

"""**A list of spaCy POS tags:**
* ADJ: adjective, e.g. big, old, green, incomprehensible, first
* ADP: adposition, e.g. in, to, during
* ADV: adverb, e.g. very, tomorrow, down, where, there
* AUX: auxiliary, e.g. is, has (done), will (do), should (do)
* CONJ: conjunction, e.g. and, or, but
* CCONJ: coordinating conjunction, e.g. and, or, but
* DET: determiner, e.g. a, an, the
* INTJ: interjection, e.g. psst, ouch, bravo, hello
* NOUN: noun, e.g. girl, cat, tree, air, beauty
* NUM: numeral, e.g. 1, 2017, one, seventy-seven, IV, MMXIV
* PART: particle, e.g. ‚Äôs, not,
* PRON: pronoun, e.g I, you, he, she, myself, themselves, somebody
* PROPN: proper noun, e.g. Mary, John, London, NATO, HBO
* PUNCT: punctuation, e.g. ., (, ), ?
* SCONJ: subordinating conjunction, e.g. if, while, that
* SYM: symbol, e.g. $, %, ¬ß, ¬©, +, ‚àí, √ó, √∑, =, :), üòù
* VERB: verb, e.g. run, runs, running, eat, ate, eating
* X: other, e.g. sfpksdpsxmsa
* SPACE: space, e.g.
"""

# Print statistics
incl_pos = 'ADP CONJ CCONJ DET INTJ NUM PART PRON SCONJ'.split()
excl_pos = 'PROPN PUNCT SYM SPACE X'.split()

srv_words = [w.text for w in ptext if w.pos_ in incl_pos]
all_words = [w.text for w in ptext if w.pos_ not in excl_pos]

print('POS_TAG   WORDS\n' + 70*'-')
for pos in incl_pos:
  pos_words = set([w.text for w in ptext if w.pos_==pos])
  print('{:<10}{}'.format(pos, pos_words if pos_words!=set() else {''}))

print( '\nA total of %.u service words cover %.u%% of the text' % (len(set(srv_words)), 100*len(srv_words)/len(all_words)) )
