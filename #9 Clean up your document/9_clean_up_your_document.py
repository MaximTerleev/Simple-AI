# -*- coding: utf-8 -*-
"""#9 Clean up your document

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BtpL5H56HCyoHdc0sIlN9UkKoICAirWE?usp=sharing

# **Clean up your document**

"""

from keras.preprocessing import image
import matplotlib.pyplot as plt
import scipy.signal as sg
import numpy as np
import cv2

# Load document
file = '/content/noisy-doc.png'
noisy = image.load_img(file, color_mode='grayscale')
noisy = np.array(noisy)
imshape = noisy.shape
plt.figure(figsize=(10,15)); plt.axis('off'); plt.imshow(noisy, cmap='gray')

"""**Adaptive thresholding**

"""

# Adaptive thresholding
clean = cv2.adaptiveThreshold(noisy, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 91, 15)
clean = cv2.dilate(clean,(3,3))
clean = cv2.morphologyEx(clean, cv2.MORPH_CLOSE, (3,3))
clean[:,-100:] = 255
plt.figure(figsize=(10,15)); plt.axis('off'); plt.imshow(clean, cmap='gray')

def eval_doc(image, imshape):
 
  vmargin = int(imshape[0]/30)
  hmargin = int(imshape[1]/20)
  window = int(imshape[1]/20)

  means = []
  for i in range(vmargin, imshape[0]-vmargin, 5):
    for j in range(hmargin, imshape[1]-hmargin, window):
      means.append(image[i, j:j+window].mean())
 
  y = np.histogram(means, bins=20)[0]
  maxs = sg.argrelmax(y)[0]
  mins = sg.argrelmin(y)[0]

  contrast = 0
  if maxs.shape[0]==1 & mins.shape[0]==1:
    contrast = y[maxs[0]] / y[mins[0]]
 
  return contrast

# Find best parameters
outcomes = []
for reach in [11, 21, 31, 41, 51, 61, 71, 81, 91, 101]:
 for clearance in [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]:
    clean = cv2.adaptiveThreshold(noisy, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, reach, clearance)
    clean = cv2.morphologyEx(clean, cv2.MORPH_CLOSE, (3,3))
    outcomes.append([eval_doc(clean, imshape), reach, clearance])
sorted(outcomes, reverse=1)[0]
