# -*- coding: utf-8 -*-
"""#1 Jigsaw puzzle geometrical fit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DV205Jpe2t1G-Dhbfdm0LeS3fluJY5oE?usp=sharing

# **Jigsaw puzzle geometrical fit**


"""

import matplotlib.pyplot as plt
from fastdtw import fastdtw
from glob import glob
from PIL import Image
import numpy as np
import cv2

# Load pics
pics = []
for file in glob('/content/*.png'):
  pic = np.array(Image.open(file).convert('L')).astype('uint8')
  pic[pic>0] = 255; pic[pic==0] = 100
  pics.append(pic)

# Plot pics
n = len(pics)
plt.subplots(1, n, figsize = (16,3))
for i in range(n):
  plt.subplot(1, n, i+1)
  plt.imshow(pics[i], cmap='gray')
plt.show()

def get_borders(img):
  
  edge = cv2.Canny(img, 0, 255)
  foursides = [edge, np.fliplr(edge), edge.T, np.fliplr(edge.T)]
  
  borders = []
  for pic in foursides:
    border = []
    for i in range(pic.shape[0]):
      border_dots = np.where(pic[i]==255)[0]
      if border_dots.shape[0] > 0:
        border.append(border_dots[0])
    norm_border = border - border[0]
    borders.append(norm_border)
    
  return borders

def rotate(img, deg):
  
  rotated_img = Image.fromarray(img).rotate(deg)
  rotated_img = np.array(rotated_img)
  rotated_img[rotated_img==0]=255
  
  return rotated_img

# Find a match
borders0 = get_borders(pics[0])
metrics = []
for i in range(1, len(pics)):
  for j in range(360):
    borders = get_borders(rotate(pics[i], j))
    dtw = fastdtw(borders0[0], borders[0])[0] + fastdtw(borders0[1], borders[1])[0] + fastdtw(borders0[2], borders[2])[0] + fastdtw(borders0[3], borders[3])[0]
    metrics.append([dtw, i, j])

idx, deg = sorted(metrics)[0][1], sorted(metrics)[0][2]
print('Correct match is #', idx, 'rotated', deg, 'deg counter clockwise')
plt.subplots(1,2, figsize=(15,5))
plt.subplot(121); plt.imshow(pics[0], cmap='gray')
plt.subplot(122); plt.imshow(rotate(pics[idx], deg), cmap='gray')
plt.show()
