# -*- coding: utf-8 -*-
"""#3 Fit a split canvas picture

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WM0Oq_aEfdshbfLgjMIez0EN3PgzvPmf?usp=sharing

# **Fit a split canvas picture**

"""

import matplotlib.pyplot as plt
from fastdtw import fastdtw
from glob import glob
from PIL import Image
import numpy as np
import cv2

# Load pictures
pics = []
for file in glob('/content/*.png'):
  img = np.array(Image.open(file))
  pics.append(img[:,:,:3])

# Show pictures
num_pics = len(pics)
plt.subplots(1, num_pics, figsize=(20,3))
for i in range(num_pics):
  plt.subplot(1, num_pics, i+1)
  plt.imshow(pics[i])
  plt.axis('off')
plt.show()

# Extract borders
borders = []
for i in range(num_pics):
  pic = cv2.cvtColor(pics[i], cv2.COLOR_RGB2HSV)
  left_border = pic[:,0,:]
  right_border = pic[:,-1,:]
  borders.append([left_border, right_border])

# Compare borders
matches = []
for i in range(num_pics):
  ileft = borders[i][0]
  for j in range(num_pics):
    if i != j:
      jright = borders[j][1]
      dtw = fastdtw(ileft[0], jright[0])[0] + fastdtw(ileft[1], jright[1])[0] + fastdtw(ileft[2], jright[2])[0]
      matches.append([dtw, i, j])
matches = sorted(matches)

# Join pictures
n_pics = int(num_pics/2)
plt.subplots(1, n_pics, figsize=(15,3))
for i in range(n_pics):
  right = matches[i][1]
  left = matches[i][2]
  img = np.concatenate([pics[left], pics[right]], axis=1)
  plt.subplot(1, n_pics, i+1)
  plt.imshow(img)
  plt.axis('off')
plt.show()
